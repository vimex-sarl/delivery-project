# This workflow deploys the webapp to Firebase Hosting.
# This version runs in the public repository and fetches the private repository first.

name: "[PROD] Deploy Firebase Hosting"
on:
  workflow_dispatch:

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

env:
  WORK_FLOW_FILE_NAME: prod-deploy-firebase-hosting
  PRIVATE_REPO_URL: git@github.com:vimex-sarl/delivery.git
  PRIVATE_REPO_BRANCH: main

jobs:
  fetch-private-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout public repository
        uses: actions/checkout@v4

      - name: Setup Git for private repository access
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Clone private repository
        run: |
          # Create SSH key for private repo access
          mkdir -p ~/.ssh
          echo "${{ secrets.PRIVATE_REPO_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add GitHub to known hosts
          ssh-keyscan github.com >> ~/.ssh/known_hosts

          # Clone private repository
          git clone $PRIVATE_REPO_URL private-repo
          cd private-repo
          git checkout $PRIVATE_REPO_BRANCH

      - name: Verify private repository structure
        run: |
          ls -la private-repo/
          echo "Private repository cloned successfully"

      - name: Upload private repository as artifact
        uses: actions/upload-artifact@v4
        with:
          name: private-repo
          path: private-repo/
          retention-days: 1

  changes:
    runs-on: ubuntu-latest
    needs: fetch-private-repo
    outputs:
      changeDetected: ${{ steps.filter.outputs.src == 'true' || steps.tag_check.outputs.exists == 'false' }}
    steps:
      - name: Checkout public repository
        uses: actions/checkout@v4

      - name: Setup Git for private repository access
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Clone private repository
        run: |
          # Create SSH key for private repo access
          mkdir -p ~/.ssh
          echo "${{ secrets.PRIVATE_REPO_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git clone $PRIVATE_REPO_URL private-repo
          cd private-repo
          git checkout $PRIVATE_REPO_BRANCH

      - name: Check if tag exists
        id: tag_check
        run: |
          TAG_NAME="${{ env.WORK_FLOW_FILE_NAME }}"
          if git ls-remote --tags origin "refs/tags/$TAG_NAME" | grep "$TAG_NAME" > /dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - uses: dorny/paths-filter@v3
        id: filter
        if: steps.tag_check.outputs.exists == 'true'
        with:
          base: ${{ env.WORK_FLOW_FILE_NAME }}
          filters: |
            src:
              - '.github/workflows/prod-deploy-firebase-hosting.yml'
              - 'frontends/admin/**'
              - 'frontends/customer-mobile/**'
              - 'common/**'

  build_and_deploy_customer:
    needs: [changes, fetch-private-repo]
    if: ${{ needs.changes.outputs.changeDetected }}
    defaults:
      run:
        working-directory: ./private-repo/frontends/customer-mobile
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Checkout public repository
        uses: actions/checkout@v4

      - name: Download private repository
        uses: actions/download-artifact@v4
        with:
          name: private-repo

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.22

      - name: Install dependencies
        run: bun i --frozen-lockfile

      - name: Allow Bots to serve the website
        run: |
          echo 'Allow: /' >> public/robots.txt

      - name: Generate google verification file
        run: |
          echo "google-site-verification: google5659b4e036a2ef1f.html" > public/google5659b4e036a2ef1f.html

      - name: Build customer webapp
        run: bun run vite:build
        env:
          VITE_FIREBASE_CONFIG_JSON: ${{ secrets.FIREBASE_CONFIG_JSON_CUSTOMER_WEB_PROD }}
          VITE_GOOGLE_MAPS_STYLE_ID: ${{ secrets.GOOGLE_MAPS_STYLE_ID_PROD }}
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY_PROD }}
          VITE_GOOGLE_PLACE_API_KEY: ${{ secrets.GOOGLE_PLACE_API_KEY_PROD }}
          VITE_FCM_VAPID_KEY: ${{ vars.FCM_WEB_PUSH_VAPID_KEY_PROD }}
          VITE_PUBLIC_WEBAPP_URL: https://vimex-coursier.web.app
          VITE_SERVER_API_ENDPOINT: https://vimex-coursier.web.app/api
          VITE_APP_ENV: prod

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_VIMEX_COURSIER_PROD }}
          channelId: live
          projectId: vimex-coursier
          target: coursier
          entryPoint: ./private-repo/frontends/customer-mobile

  build_and_deploy_admin:
    needs: [changes, fetch-private-repo]
    if: ${{ needs.changes.outputs.changeDetected }}
    defaults:
      run:
        working-directory: ./private-repo/frontends/admin
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Checkout public repository
        uses: actions/checkout@v4

      - name: Download private repository
        uses: actions/download-artifact@v4
        with:
          name: private-repo

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.22

      - name: Install dependencies
        run: bun i --frozen-lockfile

      - name: Allow Bots to serve the website
        run: |
          echo 'Allow: /' >> public/robots.txt

      - name: Generate google verification file
        run: |
          echo "google-site-verification: google5659b4e036a2ef1f.html" > public/google5659b4e036a2ef1f.html

      - name: Build admin webapp
        run: bun run vite:build
        env:
          VITE_FIREBASE_CONFIG_JSON: ${{ secrets.FIREBASE_CONFIG_JSON_ADMIN_WEB_PROD }}
          VITE_GOOGLE_MAPS_STYLE_ID: ${{ secrets.GOOGLE_MAPS_STYLE_ID_PROD }}
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY_PROD }}
          VITE_GOOGLE_PLACE_API_KEY: ${{ secrets.GOOGLE_PLACE_API_KEY_PROD }}
          VITE_FCM_VAPID_KEY: ${{ vars.FCM_WEB_PUSH_VAPID_KEY_PROD }}
          VITE_PUBLIC_WEBAPP_URL: https://admin-vimex.web.app
          VITE_SERVER_API_ENDPOINT: https://admin-vimex.web.app/api
          VITE_APP_ENV: prod

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_VIMEX_COURSIER_PROD }}
          channelId: live
          projectId: vimex-coursier
          target: admin
          entryPoint: ./private-repo/frontends/admin

  update-tag_customer:
    needs: build_and_deploy_customer
    if: ${{ needs.build_and_deploy_customer.result == 'success' }}
    timeout-minutes: 5
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout public repository
        uses: actions/checkout@v4

      - name: Update tag to current commit
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -f "$TAG_NAME"
          git push origin -f "$TAG_NAME"
        env:
          TAG_NAME: customer-${{ env.WORK_FLOW_FILE_NAME }}

  update-tag_admin:
    needs: build_and_deploy_admin
    if: ${{ needs.build_and_deploy_admin.result == 'success' }}
    timeout-minutes: 5
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout public repository
        uses: actions/checkout@v4

      - name: Update tag to current commit
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -f "$TAG_NAME"
          git push origin -f "$TAG_NAME"
        env:
          TAG_NAME: admin-${{ env.WORK_FLOW_FILE_NAME }}
