name: "[DEV] Deploy EAS Local"
on:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - frontends/customer-mobile/**
  #     - frontends/driver-mobile/**
  #     - scripts/android*
  #     - scripts/eas*
  #     - common/**
  #     - .github/workflows/dev-deploy-eas-local.yml
  workflow_dispatch:
    inputs:
      buildApp:
        description: "Build app"
        required: true
        type: choice
        options:
          - "customer-android"
          - "driver-android"
          - "all-android"
      runOn:
        description: "Run on"
        required: true
        type: choice
        options:
          - "tadjaur"
          - "ubuntu-latest"

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

defaults:
  run:
    working-directory: frontends/customer-mobile

env: # Define a shared environment variable for android and ios build.
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN_DEV }}
  BUN_VERSION: 1.2.22

jobs:
  build-customer-android:
    runs-on: ${{ github.event.inputs.runOn || 'ubuntu-latest' }}
    if: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.buildApp == 'customer-android' || github.event.inputs.buildApp == 'all-android') }}
    timeout-minutes: 60
    defaults:
      run:
        working-directory: frontends/customer-mobile

    # will be used in find_or_create_comment
    # and update_native_build_preview action
    env:
      build-name: Android APK
      comment-unique-magic-prefix: "<!-- customer_android_build_status -->"
      # comment-unique-magic-prefix: "<!-- customer_android_tadjaur_build_status -->"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find or create comment for build status
        if: github.event_name == 'pull_request'
        uses: ./.github/actions/find-or-create-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # START: Comment setup on local Tadjaur deployment
      - name: Setup Bun
        if: ${{ github.event.inputs.runOn != 'tadjaur' }}
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
      - name: Setup EAS
        if: ${{ github.event.inputs.runOn != 'tadjaur' }}
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN_DEV }}

      - name: Setup Java
        if: ${{ github.event.inputs.runOn != 'tadjaur' }}
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      # END
      - run: bun i --frozen-lockfile

      - name: Create .env file
        run: |
          echo "NODE_ENV=production" > .env
          echo "EXPO_PUBLIC_FIREBASE_CONFIG_JSON=${{ secrets.FIREBASE_CONFIG_JSON_DEV }}" >> .env
          echo "EXPO_PUBLIC_GOOGLE_MAPS_STYLE_ID=${{ secrets.GOOGLE_MAPS_STYLE_ID_DEV }}" >> .env
          echo "EXPO_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.CUSTOMER_ANDROID_GOOGLE_MAPS_API_KEY_DEV }}" >> .env
          echo "EXPO_PUBLIC_GOOGLE_PLACE_API_KEY=${{ secrets.GOOGLE_PLACE_API_KEY_DEV }}" >> .env
          echo "EXPO_PUBLIC_PUBLIC_WEBAPP_URL=https://vimex-coursier-dev.web.app" >> .env
          echo "EXPO_PUBLIC_SERVER_API_ENDPOINT=https://vimex-coursier-dev.web.app/api" >> .env
          echo "EXPO_PUBLIC_APP_ENV=dev" >> .env
      - name: Generate google-services.json
        run: |
          echo '${{ secrets.GOOGLE_SERVICES_JSON_CUSTOMER_APP_DEV }}' > google-services.json
          cat google-services.json

      - name: Extract Web Client ID
        run: |
          EXPO_PUBLIC_APP_ENV=dev node ../../scripts/android-extract-web-client-id-from-google-service-json.js

      - name: Update environment variables
        shell: bash
        run: |
          bash ../../scripts/eas-env-sync.sh
        env:
          EAS_ENV: development

      - name: Get Build Version
        shell: bash
        run: |
          MAJOR_MINOR_VERSIONS=$(jq -r '.expo.version' app.json)
          PATCH_VERSION=${{ github.run_number }}
          APP_VERSION="${MAJOR_MINOR_VERSIONS%.*}.$PATCH_VERSION"
          jq --arg version "$APP_VERSION" '.expo.version = $version' app.json > app.json.temp && mv app.json.temp app.json

      - name: Remove google-services.json line from .gitignore
        run: |
          sed -i '/google-services.json/d' .gitignore
      - name: Run Local Build for Android
        id: build
        run: |
          eas build --profile=dev --platform=android --local --non-interactive --verbose-logs
        env:
          NODE_ENV: production

      - name: Save apk
        run: |
          cp build-*.apk ../../../../latest-dev-customer-build.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: customer-android-apk
          path: frontends/customer-mobile/build-*.apk
          retention-days: 14

      - name: Update build status
        if: always() && github.event_name == 'pull_request'
        uses: ./.github/actions/update-native-build-status
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-outcome: ${{ steps.build.outcome }}

  build-driver-android:
    runs-on: ${{ github.event.inputs.runOn || 'ubuntu-latest' }}
    if: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.buildApp == 'driver-android' || github.event.inputs.buildApp == 'all-android') }}
    timeout-minutes: 60
    defaults:
      run:
        working-directory: frontends/driver-mobile

    # will be used in find_or_create_comment
    # and update_native_build_preview action
    env:
      build-name: Customer Android APK
      comment-unique-magic-prefix: "<!-- driver_android_build_status -->"
      # comment-unique-magic-prefix: "<!-- driver_android_tadjaur_build_status -->"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find or create comment for build status
        if: github.event_name == 'pull_request'
        uses: ./.github/actions/find-or-create-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        if: ${{ github.event.inputs.runOn != 'tadjaur' }}
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
      - name: Setup EAS
        if: ${{ github.event.inputs.runOn != 'tadjaur' }}
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN_DEV }}

      - name: Setup Java
        if: ${{ github.event.inputs.runOn != 'tadjaur' }}
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - run: bun i --frozen-lockfile

      - name: Create .env file
        run: |
          echo "NODE_ENV=production" > .env
          echo "EXPO_PUBLIC_FIREBASE_CONFIG_JSON=${{ secrets.FIREBASE_CONFIG_JSON_DEV }}" >> .env
          echo "EXPO_PUBLIC_GOOGLE_MAPS_STYLE_ID=${{ secrets.GOOGLE_MAPS_STYLE_ID_DEV }}" >> .env
          echo "EXPO_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.DRIVER_ANDROID_GOOGLE_MAPS_API_KEY_DEV }}" >> .env
          echo "EXPO_PUBLIC_GOOGLE_PLACE_API_KEY=${{ secrets.GOOGLE_PLACE_API_KEY_DEV }}" >> .env
          echo "EXPO_PUBLIC_PUBLIC_WEBAPP_URL=https://vimex-coursier-dev.web.app" >> .env
          echo "EXPO_PUBLIC_SERVER_API_ENDPOINT=https://vimex-coursier-dev.web.app/api" >> .env
          echo "EXPO_PUBLIC_APP_ENV=dev" >> .env
      - name: Generate google-services.json
        run: |
          echo '${{ secrets.GOOGLE_SERVICES_JSON_CUSTOMER_APP_DEV }}' > google-services.json
          cat google-services.json

      - name: Extract Web Client ID
        run: |
          EXPO_PUBLIC_APP_ENV=dev node ../../scripts/android-extract-web-client-id-from-google-service-json.js

      - name: Update environment variables
        shell: bash
        run: |
          bash ../../scripts/eas-env-sync.sh
        env:
          EAS_ENV: development
      - name: Get Build Version
        shell: bash
        run: |
          MAJOR_MINOR_VERSIONS=$(jq -r '.expo.version' app.json)
          PATCH_VERSION=${{ github.run_number }}
          APP_VERSION="${MAJOR_MINOR_VERSIONS%.*}.$PATCH_VERSION"
          jq --arg version "$APP_VERSION" '.expo.version = $version' app.json > app.json.temp && mv app.json.temp app.json

      - name: Remove google-services.json line from .gitignore
        run: |
          sed -i '/google-services.json/d' .gitignore
      - name: Run Local Build for Android
        id: build
        run: |
          eas build --profile=dev --platform=android --local --non-interactive --verbose-logs
        env:
          NODE_ENV: production

      - name: Save apk
        run: |
          cp build-*.apk ../../../../latest-dev-driver-build.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: driver-android-apk
          path: frontends/driver-mobile/build-*.apk
          retention-days: 14

      - name: Update build status
        if: always() && github.event_name == 'pull_request'
        uses: ./.github/actions/update-native-build-status
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-outcome: ${{ steps.build.outcome }}

  # build-ios:
  #   runs-on: macos-latest
  #   if: false

  #   env:
  #     build-name: iOS IPA
  #     comment-unique-magic-prefix: "<!-- ios_build_status -->"

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Find or create comment for build status
  #       if: github.event_name == 'pull_request'
  #       uses: ./.github/actions/find-or-create-comment
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}

  #     - uses: oven-sh/setup-bun@v2
  #     - run: bun i --frozen-lockfile # && bun run build

  #     - name: Setup EAS
  #       uses: expo/expo-github-action@v8
  #       with:
  #         eas-version: latest
  #         token: ${{ secrets.EXPO_TOKEN }}

  #     - name: Setup Java
  #       uses: actions/setup-java@v4
  #       with:
  #         java-version: "17"
  #         distribution: "temurin"

  #     - name: Create .env file
  #       run: |
  #         echo "EXPO_PUBLIC_FIREBASE_CONFIG_JSON=${{ secrets.FIREBASE_CONFIG_JSON_DEV }}" >> .env
  #         echo "EXPO_PUBLIC_GOOGLE_MAPS_STYLE_ID=${{ secrets.GOOGLE_MAPS_STYLE_ID_DEV }}" >> .env
  #         echo "EXPO_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.CUSTOMER_ANDROID_GOOGLE_MAPS_API_KEY_DEV }}" >> .env
  #         echo "EXPO_PUBLIC_STRIPE_CLIENT_SECRET=${{ secrets.STRIPE_CLIENT_SECRET_DEV }}" >> .env
  #         echo "EXPO_PUBLIC_PUBLIC_WEBAPP_URL=${{ vars.PUBLIC_WEBAPP_URL_DEV }}" >> .env
  #         echo "EXPO_PUBLIC_SERVER_API_ENDPOINT=${{ vars.SERVER_API_ENDPOINT_DEV }}" >> .env
  #         echo "EXPO_PUBLIC_APP_ENV=dev" >> .env

  #     - name: Generate GoogleService-Info.plist
  #       run: |
  #         echo '${{ secrets.GOOGLE_SERVICES_PLIST_CUSTOMER_APP_DEV }}' > GoogleService-Info.plist

  #     - name: Run Local Build for iOS
  #       id: build
  #       run: |
  #         export MAPBOX_DOWNLOADS_TOKEN=${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}
  #         eas build --profile preview --platform ios --local --non-interactive
  #       env:
  #         EXPO_PUBLIC_IOS_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_IOS_CLIENT_ID }}

  #     - name: Upload IPA
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ios-ipa
  #         path: frontends/customer-mobile/build-*.ipa

  #     - name: Update build status
  #       if: always() && github.event_name == 'pull_request'
  #       uses: ./.github/actions/update-native-build-status
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         build-outcome: ${{ steps.build.outcome }}
